#cloud-config
write_files:
- path: /etc/systemd/system/my-post-reboot.service
  content: |
    [Unit]
    Description=Run a command after the first reboot
    After=multi-user.target
    Wants=multi-user.target

    [Service]
    Type=idle
    ExecStart=/usr/local/bin/my-post-reboot.sh
    RemainAfterExit=true

    [Install]
    WantedBy=multi-user.target
- path: /usr/local/bin/my-post-reboot.sh
  content: |
    #!/bin/bash
    /root/wait-for-internet.sh
    docker compose -f /root/compose.yml up -d
    ${VAR-spoke-linux-server-image-gpu} && /root/wait-for-internet.sh
    ${VAR-spoke-linux-server-image-gpu} && docker compose -f /root/compose-gpu.yml up -d
    ${VAR-spoke-linux-server-image-gpu} && curl http://localhost:${VAR-spoke-linux-server-ollama-port}/api/pull -d '{ "name": "llama3:70b-instruct-q8_0" }'
    ${VAR-spoke-linux-server-image-gpu} && curl http://localhost:${VAR-spoke-linux-server-ollama-port}/api/generate -d '{"model": "llama3:70b-instruct-q8_0", "keep_alive": -1}'
    # Disable the service after the first run
    # systemctl disable my-post-reboot.service
  permissions: '0755'
- content: |
    #!/bin/bash
    #
    RESULT=1
    while [ $RESULT != 0 ]
    do
      ping -c1 -n -W 2 ${VAR-spoke-check-internet-up-ip}
      RESULT="$?"
      echo "Waiting for internet: `date`"
    done
  path: /root/wait-for-internet.sh
  permissions: '0755'
- content: |
    volumes:
      dvwa:
    services:
      dvwa80:
        container_name: dvwa80
        image: ghcr.io/digininja/dvwa:latest
        pull_policy: always
        environment:
          - DB_SERVER=db
        depends_on:
          - db
        ports:
          - 80:80
        restart: always
      dvwa81:
        container_name: dvwa81
        image: ghcr.io/digininja/dvwa:latest
        pull_policy: always
        environment:
          - DB_SERVER=db
        depends_on:
          - db
        ports:
          - 81:80
        restart: always
      db:
        container_name: db
        image: docker.io/library/mariadb:10
        pull_policy: always
        environment:
          - MYSQL_ROOT_PASSWORD=dvwa
          - MYSQL_DATABASE=dvwa
          - MYSQL_USER=dvwa
          - MYSQL_PASSWORD=p@ssw0rd
        volumes:
          - dvwa:/var/lib/mysql
        restart: always
  path: /root/compose.yml
  permissions: '0644'
- content: |
    volumes:
      open-webui:
      ollama:
    services:
      ollama:
        volumes:
          - ollama:/root/.ollama
        container_name: ollama
        pull_policy: always
        tty: true
        restart: always
        image: ollama/ollama:latest
        ports:
          - ${VAR-spoke-linux-server-ollama-port}:11434
        environment:
          - OLLAMA_HOST="0.0.0.0"
        deploy:
          resources:
            reservations:
              devices:
                - driver: nvidia
                  count: 1
                  capabilities: [gpu]
      open-webui:
        volumes:
          - open-webui:/app/backend/data
        depends_on:
          - ollama
        container_name: open-webui
        pull_policy: always
        restart: always
        image: ghcr.io/open-webui/open-webui:cuda
        ports:
          - ${VAR-spoke-linux-server-ollama-webui-port}:8080
        environment:
          - 'OLLAMA_BASE_URL=http://ollama:${VAR-spoke-linux-server-ollama-port}'
          - 'WEBUI_SECRET_KEY='
        extra_hosts:
          - host.docker.internal:host-gateway
        deploy:
          resources:
            reservations:
              devices:
                - driver: nvidia
                  count: 1
                  capabilities: [gpu]
  path: /root/compose-gpu.yml
  permissions: '0644'

runcmd:
  - export LANG="en_US.UTF-8"
  - export DEBIAN_FRONTEND=noninteractive
  - for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc openssh-server; do apt-get -y remove $pkg; done
  - /root/wait-for-internet.sh
  - apt-get install -y ca-certificates curl apt-transport-https software-properties-common
  - install -m 0755 -d /etc/apt/keyrings
  - /root/wait-for-internet.sh
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  - chmod a+r /etc/apt/keyrings/docker.asc
  - |
    echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null
  - ${VAR-spoke-linux-server-image-gpu} && /root/wait-for-internet.sh
  - ${VAR-spoke-linux-server-image-gpu} && curl -o /tmp/cuda-keyring.deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
  - ${VAR-spoke-linux-server-image-gpu} && apt install -y /tmp/cuda-keyring.deb
  - |
    ${VAR-spoke-linux-server-image-gpu} && curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
    && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
    sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
    tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
  - /root/wait-for-internet.sh
  - apt-get -y update
  - /root/wait-for-internet.sh
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  - systemctl enable docker
  - systemctl enable containerd
  - ${VAR-spoke-linux-server-image-gpu} && /root/wait-for-internet.sh
  - ${VAR-spoke-linux-server-image-gpu} && apt-get install -y ubuntu-drivers-common cuda-toolkit-12-4 nvidia-driver-550 nvidia-container-toolkit
  - ${VAR-spoke-linux-server-image-gpu} && nvidia-ctk runtime configure --runtime=docker && nvidia-ctk runtime configure --runtime=crio
  - ${VAR-spoke-linux-server-image-gpu} && curl --fail --show-error --location --progress-bar -o /usr/bin/ollama "https://ollama.com/download/ollama-linux-amd64" && chmod 755 /usr/bin/ollama
  - /root/wait-for-internet.sh
  - systemctl enable my-post-reboot.service
  - apt-get -y upgrade

power_state:
 mode: reboot
