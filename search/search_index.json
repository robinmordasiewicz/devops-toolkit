{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Devops ToolKit","text":"GitHub Actions Badges"},{"location":"#github-repo-settings","title":"GitHub Repo Settings","text":"<pre><code>gh repo edit \\\n  --default-branch main \\\n  --delete-branch-on-merge \\\n  --enable-auto-merge \\\n  --enable-discussions \\\n  --enable-issues \\\n  --enable-projects \\\n  --description \"Devops Toolkit\" \\\n  --homepage \"https://robinmordasiewicz.github.io/devops-toolkit/\" \\\n  --visibility public \\\n  --add-topic devops-toolkit \\\n  --add-topic devops \\\n  --add-topic github-actions \\\n  --add-topic terraform \\\n  --add-topic azure\n</code></pre>"},{"location":"#devcontainer","title":"Devcontainer","text":""},{"location":"Azure-Cloud-Shell/","title":"https://portal.azure.com","text":"<ul> <li>Launch Azure Cloud Shell from the top navigation of the Azure portal</li> <li>Click <code>Bash</code></li> </ul> <p>The first time starting Cloud Shell requires completing the initialization wizard.</p> <ul> <li>Click <code>Show advanced settings</code></li> </ul> <p></p> <ul> <li><code>Subscription</code>: <code>CSE-SE-DevOps</code></li> <li><code>Cloud Shell region</code>: <code>Canada Central</code></li> <li><code>Resource group</code>: <code>yourusername-cloudshell</code></li> <li><code>Storage account</code>: <code>yourusernamestorage</code></li> </ul> <p>Storage account name must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p> <ul> <li><code>File share</code>: <code>yourusername-fileshare</code></li> </ul> <p></p>"},{"location":"Fork/","title":"https://github.com/robinmordasiewicz/devops-toolkit/fork","text":""},{"location":"Profile/","title":"https://github.com/robinmordasiewicz","text":""},{"location":"Repositories/","title":"https://github.com/new","text":""},{"location":"accounts/","title":"Accounts","text":""},{"location":"accounts/#required","title":"Required","text":"<p> GitHub: Free Account - Create a \"personal\" GitHub account.</p> <p> Azure: Contact IT for access.</p>"},{"location":"accounts/#optional","title":"Optional","text":"<p> Copilot: Payment Required - After creating a GitHub account, sign up for a Copilot subscription. VsCode will require Copilot for AI assist.</p> <p> OpenAI: Payment Required - AI is used for automation of conventional commits.</p> <p> Docker: Free Account - Fortinet containers running on a development workstation require Docker installed.</p>"},{"location":"azure-az-login/","title":"Azure Authentication","text":"<ul> <li> Azure Login</li> </ul> <pre><code>az login -o none\n</code></pre> <ul> <li> Check available subscriptions</li> </ul> <pre><code>az account list --query '[].name' -o tsv\n</code></pre> <ul> <li> Set the default subscription to CSE-SE-DevOps</li> </ul> <pre><code>az account set -s CSE-SE-DevOps\n</code></pre> <ul> <li> Get Azure user UUID</li> </ul> <pre><code>az ad user list --filter \"mail eq '$(az account show --query user.name -o tsv)'\" --query \"[0].id\" -o tsv\n</code></pre> <ul> <li>Optionally, find another user ID</li> </ul> <pre><code>az ad user list --filter \"mail eq 'first.last@acme.com'\" --query \"[].id\" -o tsv\n</code></pre> <ul> <li> Verify Azure account is a member of the CSE-SE-DevOps-Contributors group</li> </ul> <pre><code>az ad group member check --group CSE-SE-DevOps-Contributors --member-id &lt;userid&gt;\n</code></pre> <ul> <li>If the Azure account is not a group member, run the following command as an administrator</li> </ul> <pre><code>az ad group member add --group CSE-SE-DevOps-Contributors --member-id &lt;userid&gt;\n</code></pre> <ul> <li>Optionally, list all the members of the group</li> </ul> <pre><code>az ad group member list --group CSE-SE-DevOps-Contributors\n</code></pre>"},{"location":"azure-install-gh/","title":"Install/Update GitHub cli","text":"<ul> <li> Create bin folder in homedir. The local/bin folder is where additional software utilities will be installed.</li> </ul> <pre><code>mkdir -p ~/.local/bin\n</code></pre> <ul> <li> GitHub CLI (gh) install</li> </ul> <pre><code>URL=$(curl -s https://api.github.com/repos/cli/cli/releases/latest |  grep \"browser_download_url.*linux_amd64.tar.gz\" | cut -d '\"' -f 4)\nVERSION=$(curl --silent \"https://api.github.com/repos/cli/cli/releases/latest\" | jq -r \".. .tag_name? // empty\" | cut -c2- )\nwget -q ${URL} -O ~/gh.tar.gz\ntar --strip-components=2 -C ~/.local/bin/ -zxf ~/gh.tar.gz gh_${VERSION}_linux_amd64/bin/gh\nrm ~/gh.tar.gz\nhash -r\n</code></pre> <ul> <li> GitHub cli (gh) login</li> </ul> <pre><code>git config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\ngh auth login\nexport GH_TOKEN=$(gh config get -h github.com oauth_token)\n</code></pre>"},{"location":"azure-install-terraform/","title":"Install/Update Terraform","text":"<ul> <li> Create bin folder in homedir. The local/bin folder is where additional software utilities will be installed.</li> </ul> <pre><code>mkdir -p ~/.local/bin\n</code></pre> <ul> <li> HashiCorp Terraform</li> </ul> <pre><code>URL=$(curl -sL https://releases.hashicorp.com/terraform/index.json | jq -r '.versions[].builds[].url' | egrep -v 'rc|beta|alpha' | egrep 'linux.*amd64' | tail -1)\nwget ${URL} -O ~/terraform.zip\nunzip -o ~/terraform.zip -d ~/.local/bin &amp;&amp; chmod 755 ~/.local/bin/terraform\nrm ~/terraform.zip\nhash -r\nterraform version\n</code></pre>"},{"location":"azure-oidc/","title":"Configuring OIDC in Azure to Authenticate a GitHub Repository","text":"<p>This guide will walk you through the steps to configure OpenID Connect (OIDC) in Azure to authenticate a GitHub repository. The instructions will cover both the web interface and the equivalent Azure CLI commands.</p>"},{"location":"azure-oidc/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following:</p> <ul> <li>An Azure account with sufficient permissions to create and manage resources.</li> <li>A GitHub repository that you want to authenticate.</li> </ul>"},{"location":"azure-oidc/#step-1-create-an-azure-active-directory-aad-application","title":"Step 1: Create an Azure Active Directory (AAD) Application","text":"<ol> <li>Go to the Azure portal and sign in with your Azure account.</li> <li>Navigate to the Azure Active Directory service.</li> <li>Click on \"App registrations\" and then click on \"New registration\".</li> <li>Provide a name for your application and select the appropriate account type.</li> <li>In the \"Redirect URI\" section, select \"Web\" and enter the redirect URI for your GitHub repository.</li> <li>Click on \"Register\" to create the application.</li> </ol>"},{"location":"azure-oidc/#step-2-configure-authentication","title":"Step 2: Configure Authentication","text":"<ol> <li>In the AAD application page, navigate to the \"Authentication\" section.</li> <li>Under \"Platform configurations\", click on \"Add a platform\" and select \"Web\".</li> <li>Enter the redirect URI for your GitHub repository.</li> <li>Under \"Implicit grant\", select \"Access tokens\" and \"ID tokens\".</li> <li>Click on \"Configure\" to save the changes.</li> </ol>"},{"location":"azure-oidc/#step-3-grant-api-permissions","title":"Step 3: Grant API Permissions","text":"<ol> <li>In the AAD application page, navigate to the \"API permissions\" section.</li> <li>Click on \"Add a permission\" and select the appropriate API.</li> <li>Grant the necessary permissions for your GitHub repository.</li> <li>Click on \"Grant admin consent\" to save the changes.</li> </ol>"},{"location":"azure-oidc/#step-4-generate-client-secret","title":"Step 4: Generate Client Secret","text":"<ol> <li>In the AAD application page, navigate to the \"Certificates &amp; secrets\" section.</li> <li>Click on \"New client secret\" and enter a description.</li> <li>Set the expiration and click on \"Add\" to generate the client secret.</li> <li>Make sure to copy and securely store the client secret as it will not be visible again.</li> </ol>"},{"location":"azure-oidc/#step-5-configure-github-repository","title":"Step 5: Configure GitHub Repository","text":"<ol> <li>Go to your GitHub repository settings.</li> <li>Navigate to the \"Secrets\" section and click on \"New repository secret\".</li> <li>Enter a name for the secret and paste the client secret value.</li> <li>Click on \"Add secret\" to save the changes.</li> </ol>"},{"location":"azure-oidc/#azure-cli-equivalent-commands","title":"Azure CLI Equivalent Commands","text":"<p>Here are the equivalent Azure CLI commands to perform the above steps:</p> <pre><code># Step 1: Create an Azure Active Directory (AAD) Application\naz ad app create --display-name \"MyApp\" --redirect-uri \"https://github.com/redirect-uri\"\n\n# Step 2: Configure Authentication\naz ad app update --id &lt;application-id&gt; --reply-urls \"https://github.com/redirect-uri\" --oauth2-allow-implicit-flow true\n\n# Step 3: Grant API Permissions\naz ad app permission add --id &lt;application-id&gt; --api &lt;api-id&gt; --api-permissions &lt;permissions&gt;\n\n# Step 4: Generate Client Secret\naz ad app credential reset --id &lt;application-id&gt; --credential-description \"MyClientSecret\"\n\n# Step 5: Configure GitHub Repository\naz repos secret update --name &lt;secret-name&gt; --value &lt;client-secret&gt; --repository &lt;repository-name&gt;\n</code></pre> <p>Replace <code>&lt;application-id&gt;</code>, <code>&lt;api-id&gt;</code>, <code>&lt;permissions&gt;</code>, <code>&lt;secret-name&gt;</code>, <code>&lt;client-secret&gt;</code>, and <code>&lt;repository-name&gt;</code> with the appropriate values.</p>"},{"location":"azure-oidc/#testing-and-validation","title":"Testing and Validation","text":"<p>To test and validate that the authentication works, follow these steps:</p> <ol> <li>Clone the GitHub repository to your local machine.</li> <li>Run the following command to authenticate using the Azure CLI:</li> </ol> <pre><code>az login --identity\n</code></pre> <ol> <li>If the authentication is successful, you will be logged in with your Azure account.</li> </ol> <p>That's it! You have successfully configured OIDC in Azure to authenticate a GitHub repository.</p>"},{"location":"azure-service-principal/","title":"Service Principal","text":"<ul> <li>Set the default subscription.</li> </ul> <pre><code>az account set -s CSE-SE-DevOps\n</code></pre> <ul> <li>Create an Azure Resource group to store the Terraform state.</li> </ul> <pre><code>az group create -n myusername-tfstate-RG -l canadacentral\naz storage account create -n myusernameaccount -g myusername-tfstate-RG -l canadacentral --sku Standard_LRS\naz storage container create -n myusernametfstate --account-name myusernameaccount --auth-mode login\n</code></pre> <ul> <li>Authenticate with a GitHub.com account.</li> </ul> <pre><code>git config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\ngh auth login\n</code></pre> <ul> <li>Create GitHub secrets.</li> </ul> <pre><code>gh secret set AZURE_STORAGE_ACCOUNT_NAME -b \"myusernameaccount\"\ngh secret set TFSTATE_CONTAINER_NAME -b \"myusernametfstate\"\ngh secret set AZURE_RESOURCE_GROUP_NAME -b \"myusername-tfstate-RG\"\n</code></pre> <ul> <li>Create a service principal.</li> </ul> <pre><code>az account list --query \"[?name=='CSE-SE-DevOps'].id\" --output tsv\naz ad sp create-for-rbac --role Contributor --scopes /subscriptions/{subscription-id} --json-auth &gt; creds.json\n</code></pre> <ul> <li>Create GitHub secrets.</li> </ul> <pre><code>gh secret set ARM_SUBSCRIPTION_ID -b \"`jq -r .subscriptionId creds.json`\"\ngh secret set ARM_TENANT_ID -b \"`jq -r .tenantId creds.json`\"\ngh secret set ARM_CLIENT_ID -b \"`jq -r .clientId creds.json`\"\ngh secret set ARM_CLIENT_SECRET -b \"`jq -r .clientSecret creds.json`\"\ngh secret set AZURE_CREDENTIALS -b \"`jq -c . creds.json`\"\n</code></pre> <ul> <li>Manually create a workflow variable using the Github UI, named <code>DEPLOYED</code>, with a value of <code>true</code>.</li> <li>Manually execute the terraform workflow, and watch job progress and resoure creation in the Azure portal.</li> <li>Modify cloud-init file and commmit, observe the auto-pull-request workflow, and then approve the pull request. Watch the job progress and resource creation in the Azure portal. Notice that the VM is re-created and initialized with the new cloud-init file.</li> <li>Toggle the DEPLOYED variable to false and manually trigger the terraform workflow. Watch the job progress and resource deletion in the Azure portal.</li> </ul>"},{"location":"azure-subscription/","title":"Azure Subscription","text":"<ul> <li> Check available subscriptions</li> </ul> <pre><code>az account list --query '[].name' -o tsv\n</code></pre> <ul> <li> Set the default subscription to CSE-SE-DevOps</li> </ul> <pre><code>az account set -s CSE-SE-DevOps\n</code></pre>"},{"location":"challenge/","title":"Developer Operations","text":""},{"location":"challenge/#second-layer","title":"Second Layer","text":"<p>Developers are influencing the operations of cloud infrastructure becuase the fundamental tools that developers have been using for many years are natively suited to cloud infrastructure operations. Operations teams are not well versed in GitOps, but developers start their day with getting assigned the task of adding a new feature.</p>"},{"location":"devops/","title":"DevOps","text":""},{"location":"devops/#plan","title":"Plan","text":""},{"location":"devops/#code","title":"Code","text":""},{"location":"devops/#build","title":"Build","text":""},{"location":"devops/#test","title":"Test","text":""},{"location":"devops/#release","title":"Release","text":""},{"location":"devops/#deploy","title":"Deploy","text":""},{"location":"devops/#operate","title":"Operate","text":""},{"location":"devops/#monitor","title":"Monitor","text":""},{"location":"devops/#scrum-sprint","title":"Scrum Sprint","text":""},{"location":"digitial-journey/","title":"Cloud Operations","text":""},{"location":"fortimanager-ztp/","title":"FortiManager ZTP","text":"<p>Fortimanager is built around provising a development platform for configurations that are submitted into your CI pipelines.</p>"},{"location":"fortimanager/","title":"FortiManager","text":"<p>We might look at management tools differently, and we might say we no longer use a User-Interface and we simply submit configs to the CD pipeline and it gets deployed, but did you know that Fortimanager has the ability to create template configs, so we have UI based tool for developing our configurations that submitted in the PR.</p>"},{"location":"fortinet-fortidevsec/","title":"FortiDevSec","text":""},{"location":"gitflow/","title":"Git Flow","text":"<pre><code>gitGraph\n    commit tag: \"v0.4.0\"\n    branch feature\n    checkout main\n    commit\n    branch bugfix\n    commit\n    checkout feature\n    commit id: \"Dark Theme\"\n    checkout main\n    merge feature\n    commit tag: \"v0.4.1\"\n    commit\n    checkout bugfix\n    commit id: \"Fixed Null Ref\"\n    checkout main\n    merge bugfix tag: \"v0.4.2\"\n    commit</code></pre> <p>The main point to understand about Gitflow is that a snapshot or branch is created, feature development is done, and when the changes are merged into main, the branch is automatically closed.</p> <p>Real gitops nerds will argue about the structure of repositories, but we need to understand what are the things that are important to customers. We dont need to be experts in Java and c++ in order to understand how to map products into an architecture maintained by developers.</p>"},{"location":"github-branch/","title":"Branch","text":""},{"location":"github-clone-repo/","title":"Clone Repo","text":"<ul> <li> Clone</li> </ul> <pre><code>git clone https://github.com/&lt;githubusername&gt;/devops-toolkit\n</code></pre> <ul> <li> CD into repository folder</li> </ul> <pre><code>cd devops-toolkit\n</code></pre> <ul> <li> List folder contents</li> </ul> <pre><code>ls -al\n</code></pre>"},{"location":"github-commit/","title":"Open Commit","text":"<p>Opencommit uses openai to create conventional commit messages.</p> <p>Install opencommit with pip:</p> <pre><code>pip install opencommit\n</code></pre>"},{"location":"github-commit/#retrieve-the-openai-api-key","title":"Retrieve the openAI API Key","text":"<ol> <li>After verifying your account, log in to your OpenAI account.</li> <li>Navigate to the <code>API Keys</code> section in your account dashboard.</li> <li>Click on the <code>Create New Key</code> button.</li> <li>A dialog box will appear asking you to name the key and select its permissions. Fill in the details and click <code>Create</code>.</li> <li>Your new API key will be generated and displayed. Make sure to copy it and store it in a safe place.</li> </ol>"},{"location":"github-copilot-install/","title":"GitHub CoPilot","text":""},{"location":"github-copilot-install/#installation-steps","title":"Installation Steps","text":"<ol> <li>Open your terminal.</li> <li>Clone the copilot repository to your local machine using the following command:</li> </ol> <pre><code>git clone https://github.com/github/copilot.vim.git\n</code></pre> <ol> <li>Move the cloned repository to your vim plugins directory:</li> </ol> <pre><code>mv copilot.vim ~/.vim/pack/github/start/\n</code></pre> <ol> <li>Open vim and run the following command to ensure the plugin is loaded:</li> </ol> <pre><code>:packloadall\n</code></pre>"},{"location":"github-copilot-install/#usage","title":"Usage","text":"<p>To check if copilot is active in vim, you can use the following command:</p> <pre><code>:CopilotStatus\n</code></pre> <p>If the plugin is active, you should see a message saying \"Copilot is active\".</p>"},{"location":"github-merge/","title":"Merge","text":""},{"location":"github-personal-access-token/","title":"Access Token","text":"<ul> <li>Create a Github personal access token for auto-pull-request.yml action to trigger additional workflows.</li> </ul> <pre><code>gh secret set PAT --body \"&lt;your-personal-access-token&gt;\"\n</code></pre>"},{"location":"github-pull-request/","title":"Pull Request","text":""},{"location":"github-push/","title":"Push","text":""},{"location":"github-secrets/","title":"Secrets","text":"<p>secret set OPENAI_API_KEY --body \"\""},{"location":"github-workflow-linter/","title":"Code Linting","text":"<p>Linting tools analyze code for potential errors, style violations, and best practices, providing developers with immediate feedback on their commited code. By catching and fixing issues early on, linting helps prevent bugs, improves readability, and promotes maintainability. It also enforces coding standards within a team, making collaboration easier and reducing the likelihood of introducing errors.</p> <p>Shift-left DevOps refers to the practice of integrating DevOps principles and practices earlier in the software development lifecycle, such as during the planning and design phases, in order to identify and address potential issues and bottlenecks earlier, leading to faster and more efficient software delivery.</p>"},{"location":"github-workflows/","title":"GitHub Actions Workflow","text":""},{"location":"gitops/","title":"GitOps","text":"<p>GitOps is the priciple of keeping CI separate from CD, in other words the development pipelines produce artifacts using their tools and those artifacts are then consumed by the delivery truck to get those products into product. The operations of delivery can use the same tools.</p> <p>There are many of these trendy combinations of two things, but GitOps is important to understand becuase applying an SDLC to infrastructure is done with the ecosystem of tools that are used to create responses to actions. We are going to use GitHub Actions to demosntrate the concepts, but long before GitHub came along tools like Jenkins or ArgoCD were used to receive webhooks to trigger actions.</p>"},{"location":"links/","title":"References","text":"<ul> <li> <p>Fortinet GitHub</p> </li> <li> <p>Conventional Commits</p> </li> <li> <p>Dependabot</p> </li> <li> <p>Terraform Style Guide</p> </li> <li> <p>Fixing secrets leaks</p> </li> <li> <p>Microsoft Learn Style Guide</p> </li> <li> <p>Microsoft Learn Authoring Guide</p> </li> <li> <p>MicrosoftDocs GitHub</p> </li> </ul>"},{"location":"links/#force-a-new-release","title":"force a new release","text":"<pre><code>git commit --allow-empty -m \"chore: release 2.0.0\" -m \"Release-As: 2.0.0\"\n</code></pre>"},{"location":"opencommit-conventional/","title":"OpenCommit Conventional","text":"<p>To install OpenCommit, run the following command in your terminal:</p> <pre><code>npm install --global opencommit\n</code></pre>"},{"location":"opencommit-conventional/#configure-opencommit","title":"Configure OpenCommit","text":"<p>To configure OpenCommit to use the conventional commits style, you need to create a <code>.opencommitrc</code> file in your project root. Add the following content to the file:</p> <pre><code>{\n  \"type\": \"conventional\"\n}\n</code></pre>"},{"location":"opencommit-conventional/#use-opencommit","title":"Use OpenCommit","text":"<p>To use OpenCommit, run the following command in your terminal:</p> <pre><code>opencommit\n</code></pre> <p>This will open an interactive prompt that will guide you through the commit process.</p>"},{"location":"opencommit-conventional/#verify-configuration","title":"Verify Configuration","text":"<p>To verify that OpenCommit is configured correctly, make a commit. The commit message should follow the conventional commits style.</p>"},{"location":"opencommit-conventional/#troubleshoot-issues","title":"Troubleshoot Issues","text":"<p>If you encounter any issues, refer to the OpenCommit documentation.</p>"},{"location":"opencommit-install/","title":"OpenCommit","text":""},{"location":"opencommit-install/#clone-repository","title":"Clone Repository","text":"<pre><code>git clone https://github.com/opencommit-dev/opencommit.git\n</code></pre>"},{"location":"opencommit-install/#change-directory","title":"Change Directory","text":"<pre><code>cd opencommit\n</code></pre>"},{"location":"opencommit-install/#install-dependencies","title":"Install Dependencies","text":"<pre><code>npm install\n</code></pre>"},{"location":"opencommit-install/#start-application","title":"Start Application","text":"<pre><code>npm start\n</code></pre>"},{"location":"secure-cloud-blueprint/","title":"Secure Cloud Blueprint","text":"<p>The CSE team has created an architecture blueprint for AWS Azure and GCP.</p>"},{"location":"source-of-truth/","title":"Source of truth","text":"<p>At the foundation of a development environment is Source Control Management such as CVS, Subversion, more recently SourceForge, GitHub, GitLab, Confluence, or Jira. An ecosystem of tools surrounds the unit testing, end to end testing, compliancy, static and dynamic security.</p> <p>One note, is that organizations struggle with disconnected development environments, and although many work towards a \"Single\" source of truth, the reality is that there ends up being multiple repositories federated or \"glued\" together.</p> <p>Developers use an elaborate system of creating \"snapshots\" of the applciation code, so that they can work on a new feature, and then that code gets committed. Often, heard in a scrum is a discussion about why a PR was rejected.</p> <p>Once the Pull Request passes all the validation tools, it can be merged into main, a new version tag can be used to promote through a staging environment into QA, or to be deployed into production using Blue-Green or A/B rollouts can be done by geography.</p>"},{"location":"terraform-deploy/","title":"Terraform Deployment","text":""},{"location":"terraform-docs/","title":"Changing PIP/UDR","text":"<p>https://learn.microsoft.com/en-us/azure/architecture/networking/guide/nva-ha#pip-udr-nvas-without-snat</p>"},{"location":"terraform-docs/#diagram","title":"Diagram","text":""},{"location":"terraform-docs/#sizing","title":"Sizing","text":"<p>https://learn.microsoft.com/en-us/azure/virtual-machines/fsv2-series</p>"},{"location":"terraform-docs/#marketplace-skus","title":"Marketplace SKUs","text":"<p>az vm image list --publisher fortinet --all</p> <p>az account list-locations --query \"[].name\" --output json</p>"},{"location":"terraform-docs/#terraformautotfvars","title":"terraform.auto.tfvars","text":"<pre><code>location                           = \"canadacentral\"\nowner_email                        = \"root@example.com\"\nhub-virtual-network_address_prefix = \"10.0.0.0/24\"\nhub-external-subnet_name           = \"hub-external_subnet\"\nhub-external-subnet_prefix         = \"10.0.0.0/27\"\nhub-external-subnet-gateway        = \"10.0.0.1\"\nhub-internal-subnet_name           = \"hub-internal_subnet\"\nhub-internal-subnet_prefix         = \"10.0.0.32/27\"\n#hub-nva-offer                        = \"fortinet_fortigate-vm_v5\"\n#hub-nva-sku                          = \"fortinet_fg-vm_payg_2023\"\nhub-nva-offer             = \"fortinet_fortiweb-vm_v5\"\nhub-nva-sku               = \"fortinet_fw-vm_payg_v3\"\nhub-nva-size              = \"Standard_F8s_v2\"\nhub-nva-management-action = \"Allow\" # Can be either Allow or Deny\n#hub-nva-management-port              = \"8443\" $ Fortiweb is 8443\nhub-nva-management-port              = \"443\"\nhub-nva-management-ip                = \"10.0.0.4\"\nhub-nva-vip                          = \"10.0.0.5\"\nhub-nva-gateway                      = \"10.0.0.37\"\nspoke-virtual-network_address_prefix = \"10.1.1.0/24\"\nspoke-subnet_name                    = \"spoke_subnet\"\nspoke-subnet_prefix                  = \"10.1.1.0/24\"\nspoke-container-server-ip            = \"10.1.1.5\"\nspoke-check-internet-up-ip           = \"8.8.8.8\"\n</code></pre>"},{"location":"terraform-docs/#requirements","title":"Requirements","text":"Name Version terraform &gt;=1.6 azurerm 3.100.0 http 3.4.1 null 3.2.2 random 3.6.1 tls 4.0.5"},{"location":"terraform-docs/#inputs","title":"Inputs","text":"Name Description Type Default Required hub-external-subnet-gateway Azure gateway IP address to the Internet <code>string</code> <code>\"10.0.0.1\"</code> no hub-external-subnet_name External Subnet Name. <code>string</code> <code>\"hub-external_subnet\"</code> no hub-external-subnet_prefix External Subnet Prefix. <code>string</code> <code>\"10.0.0.0/27\"</code> no hub-internal-subnet_name Hub Subnet Name. <code>string</code> <code>\"hub-internal_subnet\"</code> no hub-internal-subnet_prefix Hub Subnet Prefix. <code>string</code> <code>\"10.0.0.32/27\"</code> no hub-nva-gateway Hub NVA Gateway IP Address <code>string</code> <code>\"10.0.0.37\"</code> no hub-nva-management-action Allow or Deny access to Management <code>string</code> <code>\"Deny\"</code> no hub-nva-management-ip Hub NVA Management IP Address <code>string</code> <code>\"10.0.0.4\"</code> no hub-nva-management-port Hub NVA Management TCP Port <code>number</code> <code>\"443\"</code> no hub-nva-offer Hub NVA Offer <code>string</code> <code>\"fortinet_fortigate-vm_v5\"</code> no hub-nva-publisher Hub NVA Publisher <code>string</code> <code>\"fortinet\"</code> no hub-nva-size Hub NVA Size <code>string</code> <code>\"Standard_DS1_v2\"</code> no hub-nva-sku Hub NVA SKU <code>string</code> <code>\"fortinet_fg-vm_payg_2023\"</code> no hub-nva-vip Hub NVA Gateway Virtual IP Address <code>string</code> <code>\"10.0.0.5\"</code> no hub-virtual-network_address_prefix Hub Virtual Network Address prefix. <code>string</code> <code>\"10.0.0.0/24\"</code> no location Azure region for resource group. <code>string</code> <code>\"canadacentral\"</code> no owner_email Email address for use with Azure Owner tag. <code>string</code> <code>\"root@example.com\"</code> no spoke-check-internet-up-ip Spoke Container Server Checks the Internet at this IP Address <code>string</code> <code>\"8.8.8.8\"</code> no spoke-container-server-ip Spoke Container Server IP Address <code>string</code> <code>\"10.1.1.5\"</code> no spoke-container-server-offer Spoke Container Server Offer <code>string</code> <code>\"0001-com-ubuntu-server-jammy\"</code> no spoke-container-server-publisher Spoke Container Server Publisher <code>string</code> <code>\"Canonical\"</code> no spoke-container-server-size Spoke Container Server Size <code>string</code> <code>\"Standard_DS1_v2\"</code> no spoke-container-server-sku Spoke Container Server SKU <code>string</code> <code>\"22_04-lts-gen2\"</code> no spoke-subnet_name Spoke Subnet Name. <code>string</code> <code>\"spoke_subnet\"</code> no spoke-subnet_prefix Spoke Subnet Prefix. <code>string</code> <code>\"10.1.1.0/24\"</code> no spoke-virtual-network_address_prefix Spoke Virtual Network Address prefix. <code>string</code> <code>\"10.1.1.0/24\"</code> no ## Outputs Name Description admin_password Password for admin account admin_username Username for admin account hub-nva-management_public_ip Management IP address hub-nva-vip_public_ip VIP IP address management_fqdn Management FQDN vip_fqdn VIP FQDN"},{"location":"terraform-environment/","title":"Environment Variables","text":"<p>Create a copy of the example vars file, without the \"example\" extension.</p> <pre><code>cp terraform.auto.tfvars.example terraform.auto.tfvars\n</code></pre>"},{"location":"terraform-environment/#example-terraformautotfvars","title":"Example terraform.auto.tfvars","text":"<p>Modify the value of the <code>resource_group</code>. Choose a unique value.</p> <pre><code>\n</code></pre>"},{"location":"concepts/2023/11/30/source-code-management/","title":"Source Code Management","text":"<p>Source Code Management (SCM) is an indispensable tool in the Software Development Life Cycle (SDLC), including the Quality Assurance (QA), Staging, and promotion to production environments. Through enabling efficient tracking, control, and collaborative changes to code, SCM has become a crucial component of the DevOps methodology. Its role in maintaining code integrity and facilitating smooth operation between development teams makes it a cornerstone technology in modern software development.</p> <p>GitHub is widely recognized as one of the most popular SCM platforms due to its user-friendly interface and extensive functionality. However, it is not the only player; several other platforms are durable alternatives. Here are the top four competitors:</p> <ul> <li>Bitbucket :font_awesome_icon:<code>fab fa-bitbucket</code></li> <li>GitLab :font_awesome_icon:<code>fab fa-gitlab</code></li> <li>AWS CodeCommit :font_awesome_icon:<code>fab fa-aws</code></li> <li>Azure Repos :font_awesome_icon:<code>fab fa-microsoft</code></li> </ul> <p>Bitbucket and GitLab offer self-hosted options in addition to their cloud-based services, allowing for further customization and control, while AWS CodeCommit and Azure Repos are integrated with their respective cloud platforms, simplifying storage and deployment for users of these cloud services.</p> <p>At its core, git forms the backbone of a Continuous Integration / Continuous Deployment (CICD) DevOps pipeline, allowing for live tracking of changes, rollback capabilities, and failure tracing. This makes it an invaluable asset to development teams and aligns with DevOps principles of continuous improvement and automation of the software development process.</p>"},{"location":"img/screenshots/","title":"Screenshots folder","text":"<p>Save screenshots in this folder. A github action will automatically process them and add them to the docs/img folder.</p>"}]}