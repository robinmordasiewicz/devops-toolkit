{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Devops","text":"GitHub Actions Badges <pre><code>gh repo edit \\\n  --default-branch main \\\n  --delete-branch-on-merge \\\n  --enable-auto-merge \\\n  --enable-discussions \\\n  --enable-issues \\\n  --enable-projects \\\n  --description \"Devops Toolkit\" \\\n  --homepage \"https://robinmordasiewicz.github.io/devops-toolkit/\" \\\n  --visibility public \\\n  --add-topic devops-toolkit \\\n  --add-topic devops \\\n  --add-topic github-actions \\\n  --add-topic terraform \\\n  --add-topic azure \\\n  --add-topic fortinet \\\n  --add-topic fortigate \\\n  --add-topic fortios \\\n  --add-topic fortidevsec \\\n  --add-topic fortidevops \\\n  --add-topic fortinet-devops \\\n  --add-topic fortinet-devsec \\\n  --add-topic fortinet-devops-toolkit \\\n  --add-topic fortinet-devsec-toolkit \\\n  --add-topic fortinet-devsecops \\\n  --add-topic fortinet-devsecops-toolkit \\\n  --add-topic fortinet-devops-toolkit\n</code></pre>"},{"location":"accounts/","title":"Accounts","text":""},{"location":"accounts/#required","title":"Required","text":"<p> GitHub: Free Account - Create a \"personal\" GitHub account.</p> <p> Azure: Contact IT for access.</p>"},{"location":"accounts/#optional","title":"Optional","text":"<p> Copilot: Payment Required - After creating a GitHub account, sign up for a Copilot subscription. VsCode will require Copilot for AI assist.</p> <p> OpenAI: Payment Required - AI is used for automation of conventional commits.</p> <p> Docker: Free Account - Fortinet containers running on a development workstation require Docker installed.</p>"},{"location":"azure-az-login/","title":"Azure Authentication","text":"<ul> <li> Azure Login</li> </ul> <pre><code>az login -o none\n</code></pre> <ul> <li> Check available subscriptions</li> </ul> <pre><code>az account list --query '[].name' -o tsv\n</code></pre> <ul> <li> Set the default subscription to CSE-SE-DevOps</li> </ul> <pre><code>az account set -s CSE-SE-DevOps\n</code></pre> <ul> <li> Get Azure user UUID</li> </ul> <pre><code>az ad user list --filter \"mail eq '$(az account show --query user.name -o tsv)'\" --query \"[0].id\" -o tsv\n</code></pre> <ul> <li>Optionally, find another user ID</li> </ul> <pre><code>az ad user list --filter \"mail eq 'first.last@acme.com'\" --query \"[].id\" -o tsv\n</code></pre> <ul> <li> Verify Azure account is a member of the CSE-SE-DevOps-Contributors group</li> </ul> <pre><code>az ad group member check --group CSE-SE-DevOps-Contributors --member-id &lt;userid&gt;\n</code></pre> <ul> <li>If the Azure account is not a group member, run the following command as an administrator</li> </ul> <pre><code>az ad group member add --group CSE-SE-DevOps-Contributors --member-id &lt;userid&gt;\n</code></pre> <ul> <li>Optionally, list all the members of the group</li> </ul> <pre><code>az ad group member list --group CSE-SE-DevOps-Contributors\n</code></pre>"},{"location":"azure-cloud-shell/","title":"Cloud Shell","text":"<ul> <li>Azure Portal Login</li> <li>Launch Azure Cloud Shell from the top navigation of the Azure portal</li> <li>Select Bash</li> </ul> <p>The first time you start Cloud Shell you're prompted to create an Azure Storage account for the Azure file share.</p> <ul> <li>Select \"Show advanced settings\"</li> </ul> <p></p> <ul> <li>Select \"CSE-SE-DevOps\" as the \"Subscription\"</li> <li>Select \"cloud-shell-storage-eastus\" as the \"Resource group\"</li> <li>Select \"Use Existing\" for the \"Storage account\" and select \"cs2100320030cd8c0fc\" as the storage account.</li> <li>Enter \"foobazz\" as the \"File share\".</li> </ul> <p></p>"},{"location":"azure-install-gh/","title":"Install/Update GitHub cli","text":"<ul> <li> Create bin folder in homedir. The local/bin folder is where additional software utilities will be installed.</li> </ul> <pre><code>mkdir -p ~/.local/bin\n</code></pre> <ul> <li> GitHub CLI (gh) install</li> </ul> <pre><code>URL=$(curl -s https://api.github.com/repos/cli/cli/releases/latest |  grep \"browser_download_url.*linux_amd64.tar.gz\" | cut -d '\"' -f 4)\nVERSION=$(curl --silent \"https://api.github.com/repos/cli/cli/releases/latest\" | jq -r \".. .tag_name? // empty\" | cut -c2- )\nwget -q ${URL} -O ~/gh.tar.gz\ntar --strip-components=2 -C ~/.local/bin/ -zxf ~/gh.tar.gz gh_${VERSION}_linux_amd64/bin/gh\nrm ~/gh.tar.gz\nhash -r\n</code></pre> <ul> <li> GitHub cli (gh) login</li> </ul> <pre><code>git config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\ngh auth login\n</code></pre>"},{"location":"azure-install-terraform/","title":"Install/Update Terraform","text":"<ul> <li> Create bin folder in homedir. The local/bin folder is where additional software utilities will be installed.</li> </ul> <pre><code>mkdir -p ~/.local/bin\n</code></pre> <ul> <li> HashiCorp Terraform</li> </ul> <pre><code>URL=$(curl -sL https://releases.hashicorp.com/terraform/index.json | jq -r '.versions[].builds[].url' | egrep -v 'rc|beta|alpha' | egrep 'linux.*amd64' | tail -1)\nwget ${URL} -O ~/terraform.zip\nunzip -o ~/terraform.zip -d ~/.local/bin &amp;&amp; chmod 755 ~/.local/bin/terraform\nrm ~/terraform.zip\nhash -r\nterraform version\n</code></pre>"},{"location":"azure-subscription/","title":"Azure Subscription","text":"<ul> <li> Check available subscriptions</li> </ul> <pre><code>az account list --query '[].name' -o tsv\n</code></pre> <ul> <li> Set the default subscription to CSE-SE-DevOps</li> </ul> <pre><code>az account set -s CSE-SE-DevOps\n</code></pre>"},{"location":"challenge/","title":"Developer Operations","text":""},{"location":"challenge/#second-layer","title":"Second Layer","text":"<p>Developers are influencing the operations of cloud infrastructure becuase the fundamental tools that developers have been using for many years are natively suited to cloud infrastructure operations. Operations teams are not well versed in GitOps, but developers start their day with getting assigned the task of adding a new feature.</p>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"devops/","title":"DevOps","text":""},{"location":"devops/#plan","title":"Plan","text":""},{"location":"devops/#code","title":"Code","text":""},{"location":"devops/#build","title":"Build","text":""},{"location":"devops/#test","title":"Test","text":""},{"location":"devops/#release","title":"Release","text":""},{"location":"devops/#deploy","title":"Deploy","text":""},{"location":"devops/#operate","title":"Operate","text":""},{"location":"devops/#monitor","title":"Monitor","text":""},{"location":"devops/#scrum-sprint","title":"Scrum Sprint","text":""},{"location":"digitial-journey/","title":"Cloud Operations","text":""},{"location":"fortimanager-ztp/","title":"FortiManager ZTP","text":"<p>Fortimanager is built around provising a development platform for configurations that are submitted into your CI pipelines.</p>"},{"location":"fortimanager/","title":"FortiManager","text":"<p>We might look at management tools differently, and we might say we no longer use a User-Interface and we simply submit configs to the CD pipeline and it gets deployed, but did you know that Fortimanager has the ability to create template configs, so we have UI based tool for developing our configurations that submitted in the PR.</p>"},{"location":"fortinet-fortidevsec/","title":"FortiDevSec","text":""},{"location":"gitflow/","title":"Git Flow","text":"<pre><code>gitGraph\n    commit tag: \"v0.4.0\"\n    branch feature\n    checkout main\n    commit\n    branch bugfix\n    commit\n    checkout feature\n    commit id: \"Dark Theme\"\n    checkout main\n    merge feature\n    commit tag: \"v0.4.1\"\n    commit\n    checkout bugfix\n    commit id: \"Fixed Null Ref\"\n    checkout main\n    merge bugfix tag: \"v0.4.2\"\n    commit</code></pre> <p>The main point to understand about Gitflow is that a snapshot or branch is created, feature development is done, and when the changes are merged into main, the branch is automatically closed.</p> <p>Real gitops nerds will argue about the structure of repositories, but we need to understand what are the things that are important to customers. We dont need to be experts in Java and c++ in order to understand how to map products into an architecture maintained by developers.</p>"},{"location":"github-branch/","title":"Branch","text":""},{"location":"github-clone-repo/","title":"Clone Repo","text":"<ul> <li> Clone</li> </ul> <pre><code>git clone https://github.com/&lt;githubusername&gt;/fortinet-devops\n</code></pre> <ul> <li> CD into repository folder</li> </ul> <pre><code>cd fortinet-devops\n</code></pre> <ul> <li> List folder contents</li> </ul> <pre><code>ls -al\n</code></pre>"},{"location":"github-commit/","title":"Open Commit","text":"<p>Opencommit uses openai to create conventional commit messages.</p> <p>Install opencommit with pip:</p> <pre><code>pip install opencommit\n</code></pre>"},{"location":"github-commit/#retrieve-the-openai-api-key","title":"Retrieve the openAI API Key","text":"<ol> <li>After verifying your account, log in to your OpenAI account.</li> <li>Navigate to the <code>API Keys</code> section in your account dashboard.</li> <li>Click on the <code>Create New Key</code> button.</li> <li>A dialog box will appear asking you to name the key and select its permissions. Fill in the details and click <code>Create</code>.</li> <li>Your new API key will be generated and displayed. Make sure to copy it and store it in a safe place.</li> </ol>"},{"location":"github-copilot-install/","title":"GitHub CoPilot","text":""},{"location":"github-copilot-install/#installation-steps","title":"Installation Steps","text":"<ol> <li>Open your terminal.</li> <li>Clone the copilot repository to your local machine using the following command:</li> </ol> <pre><code>git clone https://github.com/github/copilot.vim.git\n</code></pre> <ol> <li>Move the cloned repository to your vim plugins directory:</li> </ol> <pre><code>mv copilot.vim ~/.vim/pack/github/start/\n</code></pre> <ol> <li>Open vim and run the following command to ensure the plugin is loaded:</li> </ol> <pre><code>:packloadall\n</code></pre>"},{"location":"github-copilot-install/#usage","title":"Usage","text":"<p>To check if copilot is active in vim, you can use the following command:</p> <pre><code>:CopilotStatus\n</code></pre> <p>If the plugin is active, you should see a message saying \"Copilot is active\".</p>"},{"location":"github-create-repo/","title":"Create Repository","text":"<p>https://github.com/new</p> <p></p>"},{"location":"github-fork-repo/","title":"Fork Repository","text":"<p>https://github.com/robinmordasiewicz/fortinet-devops/fork</p> <p></p>"},{"location":"github-merge/","title":"Merge","text":""},{"location":"github-profile/","title":"GitHub Profile","text":"<ul> <li>View https://github.com/robinmordasiewicz, click \"fortinet-devops\"</li> </ul>"},{"location":"github-pull-request/","title":"Pull Request","text":""},{"location":"github-push/","title":"Push","text":""},{"location":"github-secrets/","title":"Secrets","text":"<p>secret set OPENAI_API_KEY --body \"\""},{"location":"github-workflows/","title":"GitHub Actions Workflow","text":""},{"location":"gitops/","title":"GitOps","text":"<p>GitOps is the priciple of keeping CI separate from CD, in other words the development pipelines produce artifacts using their tools and those artifacts are then consumed by the delivery truck to get those products into product. The operations of delivery can use the same tools.</p> <p>There are many of these trendy combinations of two things, but GitOps is important to understand becuase applying an SDLC to infrastructure is done with the ecosystem of tools that are used to create responses to actions. We are going to use GitHub Actions to demosntrate the concepts, but long before GitHub came along tools like Jenkins or ArgoCD were used to receive webhooks to trigger actions.</p>"},{"location":"links/","title":"References","text":"<ul> <li> <p>Fortinet GitHub</p> </li> <li> <p>Conventional Commits</p> </li> <li> <p>Dependabot</p> </li> <li> <p>Terraform Style Guide</p> </li> <li> <p>Fixing secrets leaks</p> </li> <li> <p>Microsoft Learn Style Guide</p> </li> <li> <p>Microsoft Learn Authoring Guide</p> </li> <li> <p>MicrosoftDocs GitHub</p> </li> </ul>"},{"location":"links/#force-a-new-release","title":"force a new release","text":"<pre><code>git commit --allow-empty -m \"chore: release 2.0.0\" -m \"Release-As: 2.0.0\"\n</code></pre>"},{"location":"opencommit-conventional/","title":"OpenCommit Conventional","text":"<p>To install OpenCommit, run the following command in your terminal:</p> <pre><code>npm install --global opencommit\n</code></pre>"},{"location":"opencommit-conventional/#configure-opencommit","title":"Configure OpenCommit","text":"<p>To configure OpenCommit to use the conventional commits style, you need to create a <code>.opencommitrc</code> file in your project root. Add the following content to the file:</p> <pre><code>{\n  \"type\": \"conventional\"\n}\n</code></pre>"},{"location":"opencommit-conventional/#use-opencommit","title":"Use OpenCommit","text":"<p>To use OpenCommit, run the following command in your terminal:</p> <pre><code>opencommit\n</code></pre> <p>This will open an interactive prompt that will guide you through the commit process.</p>"},{"location":"opencommit-conventional/#verify-configuration","title":"Verify Configuration","text":"<p>To verify that OpenCommit is configured correctly, make a commit. The commit message should follow the conventional commits style.</p>"},{"location":"opencommit-conventional/#troubleshoot-issues","title":"Troubleshoot Issues","text":"<p>If you encounter any issues, refer to the OpenCommit documentation.</p>"},{"location":"opencommit-install/","title":"OpenCommit","text":""},{"location":"opencommit-install/#clone-repository","title":"Clone Repository","text":"<pre><code>git clone https://github.com/opencommit-dev/opencommit.git\n</code></pre>"},{"location":"opencommit-install/#change-directory","title":"Change Directory","text":"<pre><code>cd opencommit\n</code></pre>"},{"location":"opencommit-install/#install-dependencies","title":"Install Dependencies","text":"<pre><code>npm install\n</code></pre>"},{"location":"opencommit-install/#start-application","title":"Start Application","text":"<pre><code>npm start\n</code></pre>"},{"location":"secure-cloud-blueprint/","title":"Secure Cloud Blueprint","text":"<p>The CSE team has created an architecture blueprint for AWS Azure and GCP.</p>"},{"location":"source-of-truth/","title":"Source of truth","text":"<p>At the foundation of a development environment is Source Control Management such as CVS, Subversion, more recently SourceForge, GitHub, GitLab, Confluence, or Jira. An ecosystem of tools surrounds the unit testing, end to end testing, compliancy, static and dynamic security.</p> <p>One note, is that organizations struggle with disconnected development environments, and although many work towards a \"Single\" source of truth, the reality is that there ends up being multiple repositories federated or \"glued\" together.</p> <p>Developers use an elaborate system of creating \"snapshots\" of the applciation code, so that they can work on a new feature, and then that code gets committed. Often, heard in a scrum is a discussion about why a PR was rejected.</p> <p>Once the Pull Request passes all the validation tools, it can be merged into main, a new version tag can be used to promote through a staging environment into QA, or to be deployed into production using Blue-Green or A/B rollouts can be done by geography.</p>"},{"location":"terraform-deploy/","title":"Terraform Deployment","text":""},{"location":"terraform-docs/","title":"Terraform Docs","text":""},{"location":"terraform-docs/#fortinet-azure-terraform","title":"Fortinet Azure Terraform","text":"<pre><code>%%tfmermaid\n%%{init:{\"theme\":\"default\",\"themeVariables\":{\"lineColor\":\"#6f7682\",\"textColor\":\"#6f7682\"}}}%%\nflowchart LR\nclassDef r fill:#5c4ee5,stroke:#444,color:#fff\nclassDef v fill:#eeedfc,stroke:#eeedfc,color:#5c4ee5\nclassDef ms fill:none,stroke:#dce0e6,stroke-width:2px\nclassDef vs fill:none,stroke:#dce0e6,stroke-width:4px,stroke-dasharray:10\nclassDef ps fill:none,stroke:none\nclassDef cs fill:#f7f8fa,stroke:#dce0e6,stroke-width:2px\nsubgraph \"n0\"[\"Compute\"]\nn1[\"azurerm_availability_set.&lt;br/&gt;fortinet_availability_set\"]:::r\nn2[\"azurerm_linux_virtual_machine.&lt;br/&gt;fortigate_virtual_machine\"]:::r\nend\nclass n0 cs\nsubgraph \"n3\"[\"Network\"]\nn4[\"azurerm_network_interface.&lt;br/&gt;fortigate_dmz_network_interface\"]:::r\nn5[\"azurerm_network_interface.&lt;br/&gt;fortigate_external_network_interface\"]:::r\nn6[\"azurerm_network_interface_security_group_association.&lt;br/&gt;fortigate_association\"]:::r\nn7[\"azurerm_network_security_group.&lt;br/&gt;nsg\"]:::r\nn8[\"azurerm_network_security_group.&lt;br/&gt;private_nsg\"]:::r\nn9[\"azurerm_network_security_group.&lt;br/&gt;vip_allow_https_tcp_nsg\"]:::r\nna[\"azurerm_public_ip.&lt;br/&gt;fortigate_public_ip\"]:::r\nnb[\"azurerm_public_ip.&lt;br/&gt;vip_public_ip\"]:::r\nnc[\"azurerm_subnet.dmz_subnet\"]:::r\nnd[\"azurerm_subnet.&lt;br/&gt;external_subnet\"]:::r\nne[\"azurerm_subnet.&lt;br/&gt;internal_subnet\"]:::r\nnf[\"azurerm_subnet_network_security_group_association.&lt;br/&gt;dmz_subnet_association\"]:::r\nng[\"azurerm_subnet_network_security_group_association.&lt;br/&gt;external_subnet_association\"]:::r\nnh[\"azurerm_subnet_network_security_group_association.&lt;br/&gt;internal_subnet_association\"]:::r\nni[\"azurerm_virtual_network.vnet\"]:::r\nend\nclass n3 cs\nsubgraph \"nj\"[\"Base\"]\nnk[\"azurerm_resource_group.&lt;br/&gt;azure_resource_group\"]:::r\nend\nclass nj cs\nnl[\"random_integer.random_number\"]:::r\nnm[\"random_pet.admin_username\"]:::r\nnn[\"tls_private_key.ssh_key\"]:::r\nnk--&gt;n1\nn1--&gt;n2\nn4--&gt;n2\nn5--&gt;n2\nnm--&gt;n2\nnn--&gt;n2\nnc--&gt;n4\nnb--&gt;n5\nnd--&gt;n5\nn5--&gt;n6\nn9--&gt;n6\nnk--&gt;n7\nnk--&gt;n8\nnk--&gt;n9\nnk--&gt;na\nnk--&gt;nb\nni--&gt;nc\nni--&gt;nd\nni--&gt;ne\nn8--&gt;nf\nnc--&gt;nf\nn8--&gt;ng\nnd--&gt;ng\nn8--&gt;nh\nne--&gt;nh\nnk--&gt;ni\nnk--&gt;nm</code></pre>"},{"location":"terraform-docs/#example-terraformautotfvars","title":"Example terraform.auto.tfvars","text":"<pre><code>location            = \"canadacentral\"\nresource_group      = \"my-resource-group\"\nowner_email         = \"root@example.com\"\nvnet_address_prefix = \"10.0.0.0/16\"\nexternal_name       = \"external\"\nexternal_prefix     = \"10.0.1.0/24\"\ndmz_name            = \"dmz\"\ndmz_prefix          = \"10.0.2.0/24\"\ninternal_name       = \"internal\"\ninternal_prefix     = \"10.0.3.0/24\"\n</code></pre>"},{"location":"terraform-docs/#requirements","title":"Requirements","text":"Name Version terraform &gt;= 1.6.0 azurerm 3.81.0 http 3.4.0 random 3.5.1 tls 4.0.4"},{"location":"terraform-docs/#inputs","title":"Inputs","text":"Name Description Type Default Required dmz_name DMZ Subnet Name. <code>string</code> n/a yes dmz_prefix DMZ Subnet Prefix. <code>string</code> n/a yes external_name External Subnet Name. <code>string</code> n/a yes external_prefix External Subnet Prefix. <code>string</code> n/a yes internal_name Internal Subnet Name. <code>string</code> n/a yes internal_prefix Internal Subnet Prefix. <code>string</code> n/a yes location Azure region for resource group. <code>string</code> n/a yes owner_email Email address for use with Azure Owner tag. <code>string</code> n/a yes resource_group Unique name of the Azure resource group. <code>string</code> n/a yes vnet_address_prefix Virtual Network Address prefix. <code>string</code> n/a yes ## Outputs Name Description admin_username Username for admin account fortigate_public_ip_address Management IP address terraform_version Terraform Version tls_private_key TSL private key vip_public_ip_address Public IP address"},{"location":"terraform-environment/","title":"Environment Variables","text":"<p>Create a copy of the example vars file, without the \"example\" extension.</p> <pre><code>cp terraform.auto.tfvars.example terraform.auto.tfvars\n</code></pre>"},{"location":"terraform-environment/#example-terraformautotfvars","title":"Example terraform.auto.tfvars","text":"<p>Modify the value of the <code>resource_group</code>. Choose a unique value.</p> <pre><code>location            = \"canadacentral\"\nresource_group      = \"my-resource-group\"\nowner_email         = \"root@example.com\"\nvnet_address_prefix = \"10.0.0.0/16\"\nexternal_name       = \"external\"\nexternal_prefix     = \"10.0.1.0/24\"\ndmz_name            = \"dmz\"\ndmz_prefix          = \"10.0.2.0/24\"\ninternal_name       = \"internal\"\ninternal_prefix     = \"10.0.3.0/24\"\n</code></pre>"},{"location":"blog/","title":"Blog","text":""}]}